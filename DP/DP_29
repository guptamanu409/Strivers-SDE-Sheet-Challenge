#include<bits/stdc++.h>
using namespace std;

class Solution {

private:
    int lps(string &s, string &t){
        int n = s.size();

        //Applying longest common subsequence

        // Before right 
        // vector<vector<int>>dp(n,vector<int>(n,0));

        // After shifting right because of tabulation of negative base case
        // 0 -> -1,  1 -> 0, ... N -> N-1
        vector<vector<int>>dp(n+1,vector<int>(n+1,0));

        // ind1==0 means For 1st row, all the col will be initialized with 0
        for(int ind2 =0; ind2<=n; ind2++) dp[0][ind2] = 0;

        // ind2==0 means For 1st col of every row will be initialized with a 0
        for(int ind1=0; ind1<=n; ind1++) dp[ind1][0] = 0;

        for(int ind1=1; ind1<=n; ind1++){
            for(int ind2=1; ind2<=n; ind2++){
                //After shifting right we have to explicitly reduce
                // Earlier ind1 -> n-1 
                // After shifting ind1 -> n so explicity ind1-1 similarly for ind2-1
                if(s[ind1-1]==t[ind2-1]) dp[ind1][ind2] = 1 + dp[ind1-1][ind2-1]; // Diagonally up
                else dp[ind1][ind2] = max(dp[ind1-1][ind2], dp[ind1][ind2-1]); // Up or Left
            }
        }

        return dp[n][n];
    }

public:
    int minInsertions(string &s) {
        // Find the longest palindromic subsequence present in the string
        // Then just take the difference
        // s.size() - lcs() (longest common subsequence) ðŸ˜²

        int n = s.size();
        // String of size 1 is already a palindrome
        if(n==1) return 0;

        string t = s;

        reverse(t.begin(),t.end());
        int ans = lps(s,t);

        return n-ans;

    }
};